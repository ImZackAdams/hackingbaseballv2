{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8242486a-b732-424e-8a23-ea2e46c1aeac",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from pybaseball import schedule_and_record"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "857de63b-dd9d-4140-b4c0-34154be5a78c",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(schedule_and_record(2024, \"BAL\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "965d5c44-aa0f-4e76-91ea-c4a464301edc",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "# List of MLB team abbreviations\n",
    "team_abbreviations = [\n",
    "    'ARI', 'ATL', 'BAL', 'BOS', 'CHC', \n",
    "    'CIN', 'CLE', 'COL', 'CHW', 'DET', \n",
    "    'HOU', 'KC', 'LAA', 'LAD', 'MIA', \n",
    "    'MIL', 'MIN', 'NYM', 'NYY', 'OAK', \n",
    "    'PHI', 'PIT', 'SD', 'SEA', 'SF', \n",
    "    'STL', 'TB', 'TEX', 'TOR', 'WSN'\n",
    "]\n",
    "\n",
    "all_games = pd.DataFrame()\n",
    "\n",
    "for team in team_abbreviations:\n",
    "    try:\n",
    "        team_schedule = schedule_and_record(2024, team)\n",
    "        all_games = pd.concat([all_games, team_schedule], ignore_index=True)\n",
    "    except Exception as e:\n",
    "        print(f\"Failed to retrieve schedule for {team}: {e}\")\n",
    "\n",
    "## First, filter out rows where 'Date', 'Tm', or 'Opp' might be null\n",
    "all_games = all_games.dropna(subset=['Date', 'Tm', 'Opp'])\n",
    "\n",
    "# Then, apply the lambda function to generate 'unique_id'\n",
    "all_games['unique_id'] = all_games.apply(lambda row: row['Date'] + ''.join(sorted([row['Tm'], row['Opp']])), axis=1)\n",
    "\n",
    "# Now, drop duplicates based on 'unique_id'\n",
    "unique_games = all_games.drop_duplicates(subset=['unique_id'])\n",
    "\n",
    "# Optional: Drop the 'unique_id' column if it's no longer needed\n",
    "unique_games = unique_games.drop(columns=['unique_id'])\n",
    "\n",
    "print(unique_games)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "451e04a4-fa47-4019-96e7-9cafc9731742",
   "metadata": {},
   "outputs": [],
   "source": [
    "pd.set_option('display.max_rows', None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0e5c29a9-ff99-4507-a457-2d9fbcea0456",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(unique_games)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5eaf680d-db30-4bf2-9218-a8062f1e87c0",
   "metadata": {},
   "outputs": [],
   "source": [
    "unique_games.shape\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3ebfa544-7fea-4b32-8228-688d105f6615",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "# Convert 'Date' column to datetime objects\n",
    "unique_games['Date'] = pd.to_datetime(unique_games['Date'], errors='coerce', format='%A, %b %d')\n",
    "\n",
    "# Now sort by 'Date' in ascending order\n",
    "unique_games_sorted = unique_games.sort_values(by='Date', ascending=True)\n",
    "\n",
    "# Reset the index of the DataFrame after sorting (optional but often helpful)\n",
    "unique_games_sorted = unique_games_sorted.reset_index(drop=True)\n",
    "\n",
    "print(unique_games_sorted)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ed2f628a-a554-4939-843b-77279f1b1888",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Assuming the 'Date' column is already a datetime object but with the wrong year\n",
    "unique_games['Date'] = unique_games['Date'].apply(lambda d: d.replace(year=2024))\n",
    "\n",
    "# Now sort by 'Date' in ascending order\n",
    "unique_games_sorted = unique_games.sort_values(by='Date', ascending=True)\n",
    "\n",
    "# Reset the index of the DataFrame after sorting (optional but often helpful)\n",
    "unique_games_sorted = unique_games_sorted.reset_index(drop=True)\n",
    "\n",
    "print(unique_games_sorted)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9da1316f-cd5e-49fe-85f2-8ac0e04cd642",
   "metadata": {},
   "outputs": [],
   "source": [
    "unique_games_sorted.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9db47de9-6c54-4f08-9f52-2ad4f65f34ba",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Baseball Predictor",
   "language": "python",
   "name": "baseball-predictor"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
